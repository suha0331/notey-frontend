"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeCookie = exports.setCookie = exports.getCookie = undefined;

var _helpers = require("./helpers");

var _universalCookie = require("universal-cookie");

var _universalCookie2 = _interopRequireDefault(_universalCookie);

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cookies = new _universalCookie2.default();

/**
 * Determines if the connection is currently utilizing HTTPS.
 * @returns {boolean} True if the connection is HTTPS.
 */

var isSecure = function isSecure() {
  return (0, _helpers.isDefined)(location) && location.protocol === "https:";
};

/**
 * Retrieves a value stored in an HTTP cookie.
 * @param {string} key The name of the cookie to lookup.
 * @returns {?any} The object in the cookie store or undefined. 
 */
var getCookie = exports.getCookie = function getCookie(key) {
  var item = cookies.get(key);
  return (0, _helpers.isBlank)(item) ? undefined : item;
};

/**
 * Stores a value inside of a cookie.
 * @param {string} key The name of the cookie to create or set.
 * @param {string} value The value to store in that cookie.
 * @param {number} days The number of days until the cookie expires.
 */
var setCookie = exports.setCookie = function setCookie(key, value, days) {
  var options = {
    path: "/",
    expires: _moment2.default.utc().add(days, "days").toDate(),
    maxAge: _moment2.default.duration(days, "days").asSeconds(),
    secure: isSecure()
  };
  cookies.set(key, value, options);
};

/**
 * Clears a browser cookie matching a supplied key.
 * @param {string} key The name of the cookie to remove.
 */
var removeCookie = exports.removeCookie = function removeCookie(key) {
  cookies.remove(key, {
    path: "/"
  });
};